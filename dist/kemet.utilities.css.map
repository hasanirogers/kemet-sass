{"version":3,"file":"kemet.utilities.css","sources":["webpack:///./src/scss/library/_helpers.scss"],"sourcesContent":["@function getListFirst($list) {\n    @return nth($list, 1);\n}\n\n@function getListLast($list) {\n    $max: length($list);\n    @return nth($list, $max);\n}\n\n\n@mixin makeBreakpoints() {\n\n    @each $breakpoint, $pixel in $breakpoints {\n\n        @media screen and (min-width: #{$pixel}) {\n\n            @if $flexiplier != \"fives\" {\n                [breakpoint*=\"#{$breakpoint}-25\"] {\n                    flex: 0 0 25%;\n                    max-width: 25%;\n                }\n            }\n\n            [breakpoint*=\"#{$breakpoint}-33\"] {\n                flex: 0 0 33.33%;\n                max-width: 33.33%;\n            }\n\n            [breakpoint*=\"#{$breakpoint}-66\"] {\n                flex: 0 0 66.66%;\n                max-width: 66.66%;\n            }\n\n            @if $flexiplier != \"fives\" {\n                [breakpoint*=\"#{$breakpoint}-75\"] {\n                    flex: 0 0 75%;\n                    max-width: 75%;\n                }\n            }\n\n            [breakpoint*=\"#{$breakpoint}-content\"] {\n                flex: 0 0 auto;\n            }\n\n\n            @if $flexiplier == \"fives\" {\n                @for $i from 1 through 20 {\n                    $size: $i*5;\n                    $percent: $size + \"%\";\n\n                    [breakpoint*=\"#{$breakpoint}-#{$size}\"] {\n                        flex: 0 0 unquote($percent);\n                        max-width: unquote($percent);\n                    }\n                }\n            }\n\n            @if $flexiplier == \"tens\" {\n                @for $i from 1 through 10 {\n                    $size: $i*10;\n                    $percent: $size + \"%\";\n\n                    [breakpoint*=\"#{$breakpoint}-#{$size}\"] {\n                        flex: 0 0 unquote($percent);\n                        max-width: unquote($percent);\n                    }\n                }\n            }\n\n            @if $flexiplier == \"twenties\" {\n                @for $i from 1 through 5 {\n                    $size: $i*20;\n                    $percent: $size + \"%\";\n\n                    [breakpoint*=\"#{$breakpoint}-#{$size}\"] {\n                        flex: 0 0 unquote($percent);\n                        max-width: unquote($percent);\n                    }\n                }\n            }\n\n        } // media query\n\n    }\n\n}\n\n@mixin makeGutters() {\n    [gutters] {\n        margin-right: -(map-get($gutters, default));\n    }\n\n    [gutters] > * {\n        padding-right: map-get($gutters, default);\n    }\n\n    [layout=\"flexgrid\"][gutters] > * {\n        margin-bottom: map-get($gutters, default);\n    }\n\n    [layout=\"flexcolumn\"][gutters] > :not(:first-child) {\n        margin-top: map-get($gutters, default);\n    }\n\n    @media only screen and (max-width: $stackpoint) {\n        [layout=\"flexrow\"][gutters][autostack] > * {\n            margin-bottom: map-get($gutters, default);\n        }\n    }\n\n    @if $makeresponsivegutters {\n        @each $breakpoint, $pixel in $breakpoints {\n            @media screen and (min-width: #{$pixel}) {\n                @each $attsvalue, $value in $gutters {\n                    $gutterselector: '[gutters*=\"#{$breakpoint}-#{$attsvalue}\"]';\n                    // @debug $gutterselector;\n\n                    #{$gutterselector} {\n                        margin-right: -($value);\n                    }\n\n                    #{$gutterselector} > * {\n                        padding-right: $value;\n                    }\n\n                    [layout=\"flexgrid\"]#{$gutterselector} > * {\n                        margin-bottom: $value;\n                    }\n\n                    [layout=\"flexcolumn\"]#{$gutterselector} > :not(:first-child) {\n                        margin-top: $value;\n                    }\n\n                    @media only screen and (max-width: $stackpoint) {\n                        [layout=\"flexrow\"]#{$gutterselector}[autostack] > * {\n                            margin-bottom: $value;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n}\n\n@mixin makeTypeSizers() {\n\n    @each $key, $value in $typesizers {\n        .text-#{$key} {\n            font-size: $value;\n        }\n    }\n\n}\n\n@mixin makeOrder() {\n\n    @each $breakpoint, $pixel in $breakpoints {\n        @media screen and (min-width: #{$pixel}) {\n            @for $i from 1 through $order {\n                [order=\"#{$breakpoint}-minus-#{$i}\"] {\n                    order: -#{$i};\n                }\n            }\n\n            @for $i from 1 through $order {\n                [order=\"#{$breakpoint}-plus-#{$i}\"] {\n                    order: #{$i};\n                }\n            }\n        }\n\n    }\n\n}\n\n@mixin makeVisibility() {\n\n    @each $breakpoint, $range in $breakranges {\n\n        $min: getListFirst($range);\n        $max: getListLast($range);\n\n        @media screen and (min-width: $min) {\n            .show-#{$breakpoint}-up {\n                display: inherit !important;\n            }\n\n            table.show-#{$breakpoint}-up {\n                display: table !important;\n            }\n\n            .hide-#{$breakpoint}-up {\n                display: none !important;\n            }\n        }\n\n        @media screen and (max-width: $max) {\n            .show-#{$breakpoint}-down {\n                display: inherit !important;\n            }\n\n            table.show-#{$breakpoint}-down {\n                display: table !important;\n            }\n\n            .hide-#{$breakpoint}-down {\n                display: none !important;\n            }\n        }\n\n        @media screen and (min-width: $min) and (max-width: $max) {\n            .show-#{$breakpoint} {\n                display: inherit !important;\n            }\n\n            table.show-#{$breakpoint} {\n                display: table !important;\n            }\n\n            .hide-#{$breakpoint} {\n                display: none !important;\n            }\n        }\n\n    } // @each\n\n}\n\n@mixin makeFlexgridBasis() {\n    @each $breakpoint, $pixel in $breakpoints {\n        @media screen and (min-width: #{$pixel}) {\n\n            @for $i from 1 through $flexgridcolumns {\n                $base: 100/$i;\n\n                [basis*=\"#{$breakpoint}-#{$i}-columns\"] > * {\n                    flex: 0 0 unquote($base+\"%\");\n                    max-width: unquote($base+\"%\");\n                }\n            }\n\n        } // media query\n    }\n}\n\n@mixin makeSpacers() {\n\n    $sides: \"top\", \"right\", \"bottom\", \"left\";\n\n    @each $breakpoint, $pixel in $breakpoints {\n        @media screen and (min-width: #{$pixel}) {\n            @each $spacer, $value in $spacers {\n                .margin-#{$breakpoint}-#{$spacer} {\n                    margin: $value;\n                }\n\n                @each $side in $sides {\n                    .margin-#{$breakpoint}-#{$spacer}-#{$side} {\n                        margin-#{$side}: $value;\n                    }\n                }\n            }\n        }\n    }\n\n}\n"],"mappings":"AAuLA;;","sourceRoot":""}