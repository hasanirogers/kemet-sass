///
///  __   __   _ _ _ _   _ _       _ _   _ _ _ _   _ _ _ _ _
/// |  | /  / |    _ _| |   \     /   | |   _ _ | |_ _   _ _|
/// |  |/  /  |  |_ _   |    \   /    | |  |_ _       | |
/// |     \   |   _ _|  |  \  \_/  /  | |   _ _|      | |
/// |  |\  \  |  |_ _   |  |\     /|  | |  | _ _      | |
/// |__| \__\ |_ _ _ _| |__| \_ _/ |__| |_ _ _ _|     |_|
///
/// Comments follow sassdoc annotation,
/// http://sassdoc.com
///
///




/// You can set gutters to whatever space you like.
/// The defaults here should cover most needs.
/// While you can add or remove plus/minus, zero is requied
/// @type Map
/// @access public
/// @group config-variables

$gutters: (
    none: 0,
    minus-3: 0.5rem,
    minus-2: 0.75rem,
    minus-1: 0.85rem,
    default: 1rem, // do not remove this
    plus-1: 1.125rem,
    plus-2: 1.25rem,
    plus-3: 1.5rem,
    plus-4: 2rem,
    plus-5: 2.25rem,
    plus-6: 3rem
);




/// Controls breakpoint sizing.
/// Must equal either "fives", "tens", or "twenties" exactly or Kemet will break
/// Note: that -25 -75 will still be added if this is by tens or twenties.
/// @type String
/// @access public
/// @group config-variables

$flexiplier: 'tens';




/// The point where Kemet goes from a small "mobile" layout to a full layout.
/// $stackpoint is used primarily to configure where autostack forces a mobile layout.
/// @type String
/// @access public
/// @group config-variables

$stackpoint: 640px;




/// A map that defines Kemet's breakpoints
/// @type Map
/// @access public
/// @group config-variables

$breakpoints: (
    tiny: 0,
    small: 321px,
    medium: 768px,
    large: 1024px,
    huge: 1440px
);




/// A map that defines ranges for Kemet's visibility classes
/// @type Map
/// @access public
/// @group config-variables

$breakranges: (
    tiny: (0, 319px),
    small: (320px, 767px),
    medium: (768px, 1023px),
    large: (1024px, 1439px),
    huge: (1440px, 9999px)
);




/// Determines the number of priority that can be set for the order attribute.
/// @type Number
/// @access public
/// @group config-variables

$order: 5;




/// The number of columns that can exist while using basis with flexgrid.
/// @type Number
/// @access public
/// @group config-variables

$flexgridcolumns: 12;




/// A map that defines sizes for type
/// @type Map
/// @access public
/// @group config-variables

$typesizers: (
    minus-3: 0.5rem,
    minus-2: 0.75rem,
    minus-1: 0.85rem,
    base: 1rem,
    plus-1: 1.125rem,
    plus-2: 1.25rem,
    plus-3: 1.5rem,
    plus-4: 2rem,
    plus-5: 2.25rem,
    plus-6: 3rem
);




/// A map that defines sizes for margins and padding helpers
/// @type Map
/// @access public
/// @group config-variables

$spacers: (
    none: 0,
    smallest: 0.5rem,
    smaller: 1.0rem,
    small: 1.5rem,
    normal: 2rem,
    large: 2.5rem,
    larger: 3.0rem,
    largest: 3.5rem
);




/// Control whether or not order attributes will be included.
/// @type Boolean
/// @access public
/// @group config-variables

$makeorder: true;



/// Control whether or not visibility classes will be included.
/// @type Boolean
/// @access public
/// @group config-variables

$makevisibility: true;




/// Control whether or not text classes will be included.
/// @type Boolean
/// @access public
/// @group config-variables

$maketext: true;




/// Control whether or not responsive gutters will be included.
/// @type Boolean
/// @access public
/// @group config-variables

$makeresponsivegutters: true;




/// Control whether or not margin utilities will be included.
/// @type Boolean
/// @access public
/// @group config-variables

$makespacers: false;

@function getListFirst($list) {
    @return nth($list, 1);
}

@function getListLast($list) {
    $max: length($list);
    @return nth($list, $max);
}


@mixin makeBreakpoints() {

    @each $breakpoint, $pixel in $breakpoints {

        @media screen and (min-width: #{$pixel}) {

            @if $flexiplier != 'fives' {
                [breakpoint*="#{$breakpoint}-25"] {
                    flex: 0 0 25%;
                    max-width: 25%;
                }
            }

            [breakpoint*="#{$breakpoint}-33"] {
                flex: 0 0 33.33%;
                max-width: 33.33%;
            }

            [breakpoint*="#{$breakpoint}-66"] {
                flex: 0 0 66.66%;
                max-width: 66.66%;
            }

            @if $flexiplier != 'fives' {
                [breakpoint*="#{$breakpoint}-75"] {
                    flex: 0 0 75%;
                    max-width: 75%;
                }
            }

            [breakpoint*="#{$breakpoint}-content"] {
                flex: 0 0 auto;
            }


            @if $flexiplier == 'fives' {
                @for $i from 1 through 20 {
                    $size: $i*5;
                    $percent: $size + '%';
                    [breakpoint*="#{$breakpoint}-#{$size}"] {
                        flex: 0 0 unquote($percent);
                        max-width: unquote($percent);
                    }
                }
            }

            @if $flexiplier == 'tens' {
                @for $i from 1 through 10 {
                    $size: $i*10;
                    $percent: $size + '%';
                    [breakpoint*="#{$breakpoint}-#{$size}"] {
                        flex: 0 0 unquote($percent);
                        max-width: unquote($percent);
                    }
                }
            }

            @if $flexiplier == 'twenties' {
                @for $i from 1 through 5 {
                    $size: $i*20;
                    $percent: $size + '%';
                    [breakpoint*="#{$breakpoint}-#{$size}"] {
                        flex: 0 0 unquote($percent);
                        max-width: unquote($percent);
                    }
                }
            }

        } // media query

    }

}

@mixin makeGutters() {

    [gutters] {
        margin-right: -(map-get($gutters, default));
    }

    [gutters] > * {
        padding-right: map-get($gutters, default);
    }

    [layout="flexgrid"][gutters] > * {
        margin-bottom: map-get($gutters, default);
    }

    [layout="flexcolumn"][gutters] > :not(:first-child) {
        margin-top: map-get($gutters, default);
    }

    @media only screen and (max-width: $stackpoint) {
        [layout="flexrow"][gutters][autostack] > * {
            margin-bottom: map-get($gutters, default);
        }
    }

    @if $makeresponsivegutters {
        @each $breakpoint, $pixel in $breakpoints {
            @media screen and (min-width: #{$pixel}) {
                @each $attsvalue, $value in $gutters {
                    $gutterselector: '[gutters*="#{$breakpoint}-#{$attsvalue}"]';
                    // @debug $gutterselector;

                    #{$gutterselector} {
                        margin-right: -($value);
                    }

                    #{$gutterselector} > * {
                        padding-right: $value;
                    }

                    [layout="flexgrid"]#{$gutterselector} > * {
                        margin-bottom: $value;
                    }

                    [layout="flexcolumn"]#{$gutterselector} > :not(:first-child) {
                        margin-top: $value;
                    }

                    @media only screen and (max-width: $stackpoint) {
                        [layout="flexrow"]#{$gutterselector}[autostack] > * {
                            margin-bottom: $value;
                        }
                    }
                }
            }
        }
    }

}

@mixin makeTypeSizers() {

    @each $key, $value in $typesizers {
        .text-#{$key} {
            font-size: $value;
        }
    }

}

@mixin makeOrder() {

    @each $breakpoint, $pixel in $breakpoints {
        @media screen and (min-width: #{$pixel}) {
            @for $i from 1 through $order {
                [order="#{$breakpoint}-minus-#{$i}"] {
                    order: -#{$i};
                }
            }

            @for $i from 1 through $order {
                [order="#{$breakpoint}-plus-#{$i}"] {
                    order: #{$i};
                }
            }
        }

    }

}

@mixin makeVisibility() {

    @each $breakpoint, $range in $breakranges {

        $min: getListFirst($range);
        $max: getListLast($range);

        @media screen and (min-width: $min) {
            .show-#{$breakpoint}-up {
                display: inherit !important;
            }

            table.show-#{$breakpoint}-up {
                display: table !important;
            }

            .hide-#{$breakpoint}-up {
                display: none !important;
            }
        }

        @media screen and (max-width: $max) {
            .show-#{$breakpoint}-down {
                display: inherit !important;
            }

            table.show-#{$breakpoint}-down {
                display: table !important;
            }

            .hide-#{$breakpoint}-down {
                display: none !important;
            }
        }

        @media screen and (min-width: $min) and (max-width: $max) {
            .show-#{$breakpoint} {
                display: inherit !important;
            }

            table.show-#{$breakpoint} {
                display: table !important;
            }

            .hide-#{$breakpoint} {
                display: none !important;
            }
        }

    } // @each

}

@mixin makeFlexgridBasis() {
    @each $breakpoint, $pixel in $breakpoints {
        @media screen and (min-width: #{$pixel}) {

            @for $i from 1 through $flexgridcolumns {
                $base: 100/$i;

                [basis*="#{$breakpoint}-#{$i}-columns"] > * {
                    flex: 0 0 unquote($base+'%');
                    max-width: unquote($base+'%');
                }
            }

        } // media query
    }
}

@mixin makeSpacers() {

    $sides: 'top', 'right', 'bottom', 'left';

    @each $breakpoint, $pixel in $breakpoints {
        @media screen and (min-width: #{$pixel}) {
            @each $spacer, $value in $spacers {
                .margin-#{$breakpoint}-#{$spacer} {
                    margin: $value;
                }

                @each $side in $sides {
                    .margin-#{$breakpoint}-#{$spacer}-#{$side} {
                        margin-#{$side}: $value;
                    }
                }
            }
        }
    }

}

%flexitem {
    flex: 1;
    display: block;
    box-sizing: border-box;
    word-wrap: break-word;
    text-align: left;
}

// row layout
// ----------

[layout="flexrow"] {
    display: flex;
    -webkit-padding-start: 0;
}

[layout="flexrow"] > * {
    @extend %flexitem;
}

// flex-items (force them to stretch)
[layout*="flex"][flex-items] > * {
    display: flex;
}

// autostack
[layout*="flex"][autostack] {
    flex-direction: column;
}

[layout*="flex"][autostack][align] > * {
    align-self: initial;
}

@media screen and (min-width: $stackpoint) {
    [layout*="flex"][autostack] {
        flex-direction: row;
    }
}

// align
[layout*="flex"][align="top"] {
     align-items: flex-start;
}

[layout*="flex"][align="middle"] {
    align-items: center;
}

[layout*="flex"][align="stretch"] {
    align-items: stretch;
}

[layout*="flex"][align="bottom"] {
    align-items: flex-end;
}

[layout*="flex"][cross-align="left"] {
    justify-content: left;
}

[layout*="flex"][cross-align="right"] {
    justify-content: right;
}

[layout*="flex"][cross-align="center"] {
    justify-content: center;
}

[layout*="flex"][cross-align="between"] {
    justify-content: space-between;
}

[layout*="flex"][cross-align="around"] {
    justify-content: space-around;
}

[layout*="flex"] > [align="top"] {
    align-self: flex-start;
}

[layout*="flex"] > [align="middle"] {
     align-self: center;
}

[layout*="flex"] > [align="stretch"] {
    align-self: stretch;
}

[layout*="flex"] > [align="bottom"] {
    align-self: flex-end;
}


// flexgrid
// --------

[layout="flexgrid"] {
    display: flex;
    flex-wrap: wrap;
    -webkit-padding-start: 0;
}

[layout="flexgrid"] > * {
    @extend %flexitem;
}

@include makeFlexgridBasis();


// flexcolumn
// ----------

[layout="flexcolumn"] {
    display: flex;
    flex-direction: column;
    min-height: 100%;
}

[layout="flexcolumn"] > * {
    flex: 1;
    display: flex;
    flex-direction: column;
}

[layout="flexcolumn"] > [size-content] {
    flex: 0 0 auto;
}

[layout="flexcolumn"][align="bottom"] {
    justify-content: flex-end;
}

[layout="flexcolumn"][align="center"] {
    justify-content: center;
}

[layout="flexcolumn"][align="between"] {
    justify-content: space-between;
}

[layout="flexcolumn"][align="around"] {
    justify-content: space-around;
}

[layout="flexcolumn"][align] > * {
    flex: 0 0 auto;
}


// flexlist
// ---------

[layout="flexlist"] {
    display: inline-flex;
    flex-wrap: wrap;
    width: auto;
    margin: 0px;
    padding: 0px;
    list-style: none;
    -webkit-padding-start: 0;
}

[layout="flexlist"] > * {
    flex: 0 0 auto;
}


// special attributes
// ------------------

@include makeBreakpoints();
@include makeGutters();

@if $makeorder {
    @include makeOrder();
}


// utility classes
// ---------------

@if $makevisibility {
    @include makeVisibility();
}

@if $maketext {
    .text-left { text-align: left; }
    .text-right { text-align: right; }
    .text-center { text-align: center; }

    @include makeTypeSizers();
}

@if $makespacers {
    @include makeSpacers();
}
